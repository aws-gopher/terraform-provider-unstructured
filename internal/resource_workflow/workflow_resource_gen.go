// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_workflow

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func WorkflowResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"destination_id": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"destinations": schema.ListAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"reprocess_all": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"schedule": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"every 15 minutes",
						"every hour",
						"every 2 hours",
						"every 4 hours",
						"every 6 hours",
						"every 8 hours",
						"every 10 hours",
						"every 12 hours",
						"daily",
						"weekly",
						"monthly",
					),
				},
			},
			"source_id": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"sources": schema.ListAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"status": schema.StringAttribute{
				Computed: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
			"workflow_nodes": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Optional: true,
							Computed: true,
						},
						"name": schema.StringAttribute{
							Required: true,
						},
						"settings": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{},
							CustomType: SettingsType{
								ObjectType: types.ObjectType{
									AttrTypes: SettingsValue{}.AttributeTypes(ctx),
								},
							},
							Optional: true,
							Computed: true,
						},
						"subtype": schema.StringAttribute{
							Required: true,
						},
						"type": schema.StringAttribute{
							Required: true,
						},
					},
					CustomType: WorkflowNodesType{
						ObjectType: types.ObjectType{
							AttrTypes: WorkflowNodesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional: true,
				Computed: true,
			},
			"workflow_type": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"basic",
						"advanced",
						"platinum",
						"custom",
					),
				},
			},
		},
	}
}

type WorkflowModel struct {
	CreatedAt     types.String `tfsdk:"created_at"`
	DestinationId types.String `tfsdk:"destination_id"`
	Destinations  types.List   `tfsdk:"destinations"`
	Id            types.String `tfsdk:"id"`
	Name          types.String `tfsdk:"name"`
	ReprocessAll  types.Bool   `tfsdk:"reprocess_all"`
	Schedule      types.String `tfsdk:"schedule"`
	SourceId      types.String `tfsdk:"source_id"`
	Sources       types.List   `tfsdk:"sources"`
	Status        types.String `tfsdk:"status"`
	UpdatedAt     types.String `tfsdk:"updated_at"`
	WorkflowNodes types.List   `tfsdk:"workflow_nodes"`
	WorkflowType  types.String `tfsdk:"workflow_type"`
}

var _ basetypes.ObjectTypable = WorkflowNodesType{}

type WorkflowNodesType struct {
	basetypes.ObjectType
}

func (t WorkflowNodesType) Equal(o attr.Type) bool {
	other, ok := o.(WorkflowNodesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t WorkflowNodesType) String() string {
	return "WorkflowNodesType"
}

func (t WorkflowNodesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	settingsAttribute, ok := attributes["settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settings is missing from object`)

		return nil, diags
	}

	settingsVal, ok := settingsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settings expected to be basetypes.ObjectValue, was: %T`, settingsAttribute))
	}

	subtypeAttribute, ok := attributes["subtype"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subtype is missing from object`)

		return nil, diags
	}

	subtypeVal, ok := subtypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subtype expected to be basetypes.StringValue, was: %T`, subtypeAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return WorkflowNodesValue{
		Id:                idVal,
		Name:              nameVal,
		Settings:          settingsVal,
		Subtype:           subtypeVal,
		WorkflowNodesType: typeVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewWorkflowNodesValueNull() WorkflowNodesValue {
	return WorkflowNodesValue{
		state: attr.ValueStateNull,
	}
}

func NewWorkflowNodesValueUnknown() WorkflowNodesValue {
	return WorkflowNodesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewWorkflowNodesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (WorkflowNodesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing WorkflowNodesValue Attribute Value",
				"While creating a WorkflowNodesValue value, a missing attribute value was detected. "+
					"A WorkflowNodesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WorkflowNodesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid WorkflowNodesValue Attribute Type",
				"While creating a WorkflowNodesValue value, an invalid attribute value was detected. "+
					"A WorkflowNodesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WorkflowNodesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("WorkflowNodesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra WorkflowNodesValue Attribute Value",
				"While creating a WorkflowNodesValue value, an extra attribute value was detected. "+
					"A WorkflowNodesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra WorkflowNodesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewWorkflowNodesValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewWorkflowNodesValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewWorkflowNodesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	settingsAttribute, ok := attributes["settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settings is missing from object`)

		return NewWorkflowNodesValueUnknown(), diags
	}

	settingsVal, ok := settingsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settings expected to be basetypes.ObjectValue, was: %T`, settingsAttribute))
	}

	subtypeAttribute, ok := attributes["subtype"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subtype is missing from object`)

		return NewWorkflowNodesValueUnknown(), diags
	}

	subtypeVal, ok := subtypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subtype expected to be basetypes.StringValue, was: %T`, subtypeAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewWorkflowNodesValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewWorkflowNodesValueUnknown(), diags
	}

	return WorkflowNodesValue{
		Id:                idVal,
		Name:              nameVal,
		Settings:          settingsVal,
		Subtype:           subtypeVal,
		WorkflowNodesType: typeVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewWorkflowNodesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) WorkflowNodesValue {
	object, diags := NewWorkflowNodesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewWorkflowNodesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t WorkflowNodesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewWorkflowNodesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewWorkflowNodesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewWorkflowNodesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewWorkflowNodesValueMust(WorkflowNodesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t WorkflowNodesType) ValueType(ctx context.Context) attr.Value {
	return WorkflowNodesValue{}
}

var _ basetypes.ObjectValuable = WorkflowNodesValue{}

type WorkflowNodesValue struct {
	Id                basetypes.StringValue `tfsdk:"id"`
	Name              basetypes.StringValue `tfsdk:"name"`
	Settings          basetypes.ObjectValue `tfsdk:"settings"`
	Subtype           basetypes.StringValue `tfsdk:"subtype"`
	WorkflowNodesType basetypes.StringValue `tfsdk:"type"`
	state             attr.ValueState
}

func (v WorkflowNodesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["settings"] = basetypes.ObjectType{
		AttrTypes: SettingsValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["subtype"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Settings.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["settings"] = val

		val, err = v.Subtype.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["subtype"] = val

		val, err = v.WorkflowNodesType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v WorkflowNodesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v WorkflowNodesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v WorkflowNodesValue) String() string {
	return "WorkflowNodesValue"
}

func (v WorkflowNodesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var settings basetypes.ObjectValue

	if v.Settings.IsNull() {
		settings = types.ObjectNull(
			SettingsValue{}.AttributeTypes(ctx),
		)
	}

	if v.Settings.IsUnknown() {
		settings = types.ObjectUnknown(
			SettingsValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Settings.IsNull() && !v.Settings.IsUnknown() {
		settings = types.ObjectValueMust(
			SettingsValue{}.AttributeTypes(ctx),
			v.Settings.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"id":   basetypes.StringType{},
		"name": basetypes.StringType{},
		"settings": basetypes.ObjectType{
			AttrTypes: SettingsValue{}.AttributeTypes(ctx),
		},
		"subtype": basetypes.StringType{},
		"type":    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":       v.Id,
			"name":     v.Name,
			"settings": settings,
			"subtype":  v.Subtype,
			"type":     v.WorkflowNodesType,
		})

	return objVal, diags
}

func (v WorkflowNodesValue) Equal(o attr.Value) bool {
	other, ok := o.(WorkflowNodesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Settings.Equal(other.Settings) {
		return false
	}

	if !v.Subtype.Equal(other.Subtype) {
		return false
	}

	if !v.WorkflowNodesType.Equal(other.WorkflowNodesType) {
		return false
	}

	return true
}

func (v WorkflowNodesValue) Type(ctx context.Context) attr.Type {
	return WorkflowNodesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v WorkflowNodesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":   basetypes.StringType{},
		"name": basetypes.StringType{},
		"settings": basetypes.ObjectType{
			AttrTypes: SettingsValue{}.AttributeTypes(ctx),
		},
		"subtype": basetypes.StringType{},
		"type":    basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SettingsType{}

type SettingsType struct {
	basetypes.ObjectType
}

func (t SettingsType) Equal(o attr.Type) bool {
	other, ok := o.(SettingsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SettingsType) String() string {
	return "SettingsType"
}

func (t SettingsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return SettingsValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewSettingsValueNull() SettingsValue {
	return SettingsValue{
		state: attr.ValueStateNull,
	}
}

func NewSettingsValueUnknown() SettingsValue {
	return SettingsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSettingsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SettingsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SettingsValue Attribute Value",
				"While creating a SettingsValue value, a missing attribute value was detected. "+
					"A SettingsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SettingsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SettingsValue Attribute Type",
				"While creating a SettingsValue value, an invalid attribute value was detected. "+
					"A SettingsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SettingsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SettingsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SettingsValue Attribute Value",
				"While creating a SettingsValue value, an extra attribute value was detected. "+
					"A SettingsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SettingsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSettingsValueUnknown(), diags
	}

	if diags.HasError() {
		return NewSettingsValueUnknown(), diags
	}

	return SettingsValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewSettingsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SettingsValue {
	object, diags := NewSettingsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSettingsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SettingsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSettingsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSettingsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSettingsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSettingsValueMust(SettingsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SettingsType) ValueType(ctx context.Context) attr.Value {
	return SettingsValue{}
}

var _ basetypes.ObjectValuable = SettingsValue{}

type SettingsValue struct {
	state attr.ValueState
}

func (v SettingsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SettingsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SettingsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SettingsValue) String() string {
	return "SettingsValue"
}

func (v SettingsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v SettingsValue) Equal(o attr.Value) bool {
	other, ok := o.(SettingsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v SettingsValue) Type(ctx context.Context) attr.Type {
	return SettingsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SettingsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}
